pipeline{
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: "15"))
        disableConcurrentBuilds()
        timeout(time: 15, unit: "MINUTES")
        timestamps()
    }
    parameters{
        choice(name: "CHART_NAME", choices: ["hello-world", "prometheus", "report-service"], description: "Pick the chart that you want to upgrade")
        string(name: "CHART_VERSION", defaultValue: "", description: "This version number should be incremented each time you make changes. Versions are expected to follow Semantic Versioning 0.1.0 (https://semver.org/)")
        string(name: "APP_VERSION", defaultValue: "", description: "This is the version number of the application being deployed. This version number should be incremented each time you make changes to the application. They should reflect the version the application is using.")
        booleanParam(name: "DEPLOY", defaultValue: false, description: "Do you want to deploy the chart in the cluster k8s?")
        
    }
    environment{
        REPOSITORY_NAME = "chartmuseum"
        REPOSITORY_URL = "http://chart-museum:8080"
    }
    stages{
        stage("Helm: Package"){
            steps{
                sh '''
                    helm repo add ${REPOSITORY_NAME} ${REPOSITORY_URL}
                    helm repo update
                    helm search repo ${params.CHART_NAME}
                    helm package ./${params.CHART_NAME} --version ${params.CHART_VERSION} --app-version ${params.APP_VERSION}
                    # If you want to use this line you need to install de push plugin
                    # helm plugin install https://github.com/chartmuseum/helm-push.git
                    helm push ./${params.CHART_NAME}-${params.CHART_VERSION}.tgz ${REPOSITORY_NAME}
                    helm repo update
                    helm search repo ${params.CHART_NAME}
                '''
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage ("Trigger: CD_Helm") {
            when { 
                branch "master"
                equals expected: "true", actual: "${params.DEPLOY}"
            }
            steps {
                build job: "CD_Helm/main", wait: false, propagate: false,
                parameters: [
                    string(name: "CHART_NAME", value: "${CHART_NAME}"),
                    string(name: "CHART_VERSION", value: "${CHART_VERSION}")
                ]
            }
        }
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}